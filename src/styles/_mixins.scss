@import "./variables";

@mixin px($value: $spacing-4) {
	padding-right: $value;
	padding-left: $value;
}

@mixin py($value: $spacing-4) {
	padding-top: $value;
	padding-bottom: $value;
}

@mixin pl($value: $spacing-4) {
	padding-left: $value;
}

@mixin pr($value: $spacing-4) {
	padding-right: $value;
}

@mixin pt($value: $spacing-4) {
	padding-top: $value;
}

@mixin pb($value: $spacing-4) {
	padding-bottom: $value;
}

@mixin p($value: $spacing-4) {
	@include px($value);
	@include py($value);
}

@mixin mx($value: $spacing-4) {
	margin-right: $value;
	margin-left: $value;
}

@mixin my($value: $spacing-4) {
	margin-top: $value;
	margin-bottom: $value;
}

@mixin ml($value: $spacing-4) {
	margin-left: $value;
}

@mixin mr($value: $spacing-4) {
	margin-right: $value;
}

@mixin mt($value: $spacing-4) {
	margin-top: $value;
}

@mixin mb($value: $spacing-4) {
	margin-bottom: $value;
}

@mixin m($value: $spacing-4) {
	@include mx($value);
	@include my($value);
}

@mixin font() {
	font-family: $font-family-default;
	font-weight: $font-weight-default;
	font-size: $font-size-base;
	line-height: $line-height-default;
	color: rgba($color-gray-700, 1);

	font-style: normal;
	font-stretch: normal;
	letter-spacing: normal;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin gradient($start, $end) {
	background-image: linear-gradient(
		to right,
		$start 0%,
		$end 51%,
		$start 100%
	);
}

@mixin shadow($opacity: 0.25) {
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, $opacity);
}

@mixin animation(
	$name,
	$duration: 0.125s,
	$timing: ease-in-out,
	$delay: 0s,
	$iteration: 1,
	$direction: normal
) {
	animation-name: cb-animation-#{$name};
	animation-duration: $duration;
	animation-timing-function: $timing;
	animation-delay: $delay;
	animation-iteration-count: $iteration;
	animation-direction: $direction;
}

@mixin transition(
	$properties: (
		all,
	),
	$duration: 0.35s,
	$delay: null,
	$easing: ease-in-out
) {
	$value: null;

	@each $prop in $properties {
		$prop-value: append((), $prop, space);
		$prop-value: append($prop-value, $duration, space);

		@if $delay != null {
			$prop-value: append($prop-value, $delay, space);
		}

		$prop-value: append($prop-value, $easing, space);
		$value: append($value, $prop-value, comma);
	}

	transition: $value;
}

@mixin interactable {
	outline: none !important;
	cursor: pointer;
	opacity: 100%;
}

@mixin focusable($color: rgba($color-primary-200, 0.25)) {
	outline: none;

	&:not(.is-disabled),
	&:enabled {
		&:focus,
		&.is-focused {
			box-shadow: 0 0 0 0.2rem $color;

			@content;
		}
	}
}

@mixin hoverable {
	&:not(.is-disabled),
	&:enabled {
		&:hover {
			@content;
		}
	}
}

@mixin activable {
	&:not(.is-disabled),
	&:enabled {
		&:active {
			@content;
		}
	}
}

@mixin disableable($opacity: 0.25) {
	&.is-disabled,
	&:disabled {
		cursor: not-allowed;
		opacity: $opacity;
		user-select: none;

		&:active {
			pointer-events: none;
		}
	}
}

@mixin rounded(
	$border-radius: 0.1875rem,
	$top-left: true,
	$top-right: true,
	$bottom-left: true,
	$bottom-right: true
) {
	@if $top-left {
		border-top-left-radius: $border-radius;
	} @else {
		border-top-left-radius: 0;
	}

	@if $top-right {
		border-top-right-radius: $border-radius;
	} @else {
		border-top-right-radius: 0;
	}

	@if $bottom-left {
		border-bottom-left-radius: $border-radius;
	} @else {
		border-bottom-left-radius: 0;
	}

	@if $bottom-right {
		border-bottom-right-radius: $border-radius;
	} @else {
		border-bottom-right-radius: 0;
	}
}

@mixin bordered(
	$top: true,
	$right: true,
	$bottom: true,
	$left: true,
	$color: rgba($color-gray-400, 1),
	$style: solid
) {
	@if $top {
		border-top: 1px $style $color;
	} @else {
		border-top: none;
	}

	@if $right {
		border-right: 1px $style $color;
	} @else {
		border-right: none;
	}

	@if $bottom {
		border-bottom: 1px $style $color;
	} @else {
		border-bottom: none;
	}

	@if $left {
		border-left: 1px $style $color;
	} @else {
		border-left: none;
	}
}

@mixin truncate($limit: 100%, $important: false) {
	@if $important == "important" {
		$important: unquote("!important");
	} @else {
		$important: null;
	}

	max-width: $limit $important;
	overflow: hidden $important;
	white-space: nowrap $important;
	text-overflow: ellipsis $important;
}

// Mixin to quickly apply accessible hiding to elements.
@mixin hidden($accessible: false) {
	@if $accessible != false {
		display: none !important;
		opacity: 0% !important;
	} @else {
		position: absolute !important;
		width: 1px !important;
		height: 1px !important;
		margin: -1px !important;
		padding: 0 !important;
		overflow: hidden !important;
		white-space: nowrap !important;
		border: 0 !important;
		clip: rect(0 0 0 0) !important;
		clip-path: inset(50%) !important;
		pointer-events: none;
	}
}
